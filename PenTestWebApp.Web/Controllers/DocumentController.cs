using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace PenTestWebApp.Web.Controllers
{
    public class CustomFileContentResult : FileContentResult
    {
        public CustomFileContentResult(byte[] fileContents, string contentType) : base(fileContents, contentType)
        {
        }

        public override void ExecuteResult(ControllerContext context)
        {
            context.HttpContext.Response.AddHeader("X-Download-Options","noopen");
            base.ExecuteResult(context);
        }
    }
    public class FileContentDownloadResult : FileContentResult
    {
        public FileContentDownloadResult(byte[] fileContents, string contentType)
            : base(fileContents, contentType)
        {
        }

        public override void ExecuteResult(ControllerContext context)
        {
            context.HttpContext.Response.AddHeader("Content-Disposition", "attachment");
            base.ExecuteResult(context);
        }
    }
    public class DocumentController : Controller
    {
        public ActionResult Index()
        {
            return View(MvcApplication.DataStore.Documents.ToList());
        }

        public ActionResult Download(Guid id)
        {
            var document = MvcApplication.DataStore.Documents.First(t => t.Id == id);
            return new FileContentDownloadResult(document.FileBytes, document.MimeType) //CustomFileContentResult
            {
                //1. Always set the content disposition
                //FileDownloadName = document.FileName
            };
            //X-Download-Options: noopen
        }

        //public ActionResult DownloadByName(string id)
        //{
        //    var document = MvcApplication.DataStore.Documents.First(t => t.FileName == id);
        //    return new FileContentResult(document.FileBytes, document.MimeType) //CustomFileContentResult
        //    {
        //        FileDownloadName = document.FileName
        //    };
        //    //X-Download-Options: noopen
        //}

        static ISet<string> AllowedExtensions = new HashSet<string>(StringComparer.OrdinalIgnoreCase) {".txt", ".htm"};

        static ISet<string> AllowedMimeTypes = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "text/plain", "application/zip", "application/x-zip-compressed" };

        [HttpPost]
        public ActionResult Upload(HttpPostedFileBase file, string name)
        {
            //if (AllowedExtensions.Contains(Path.GetExtension(file.FileName)))
            if (AllowedMimeTypes.Contains(file.ContentType))
            {
                MvcApplication.DataStore.Documents.Add(new Document
                {
                    Id = Guid.NewGuid(),
                    FileBytes = file.InputStream.ReadAllBytes(),
                    MimeType = file.ContentType,
                    FileName = file.FileName // no!
                });
            }
            return RedirectToAction("Index");
        }
	}
}