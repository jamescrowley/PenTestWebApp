using System;
using System.Net;
using System.Web.Mvc;
using Newtonsoft.Json;

namespace PenTestWebApp.Web.MvcExtensions
{
    public class JsonNetResult : JsonResult
    {
        public Formatting Formatting { get; set; }
        public HttpStatusCode StatusCode { get; set; }
        public string StatusDescription { get; set; }

        public JsonNetResult()
        {
            Formatting = Formatting.None;
            QuoteName = true;
            StatusCode = HttpStatusCode.OK;
        }

        public JsonNetResult(object data)
            : this()
        {
            Data = data;
        }

        public bool QuoteName { get; set; }
        public override void ExecuteResult(ControllerContext context)
        {
            if (context == null)
                throw new ArgumentNullException("context");
            if (JsonRequestBehavior == JsonRequestBehavior.DenyGet && String.Equals(context.HttpContext.Request.HttpMethod, "GET", StringComparison.OrdinalIgnoreCase))
                throw new InvalidOperationException("This request has been blocked because sensitive information could be disclosed to third party web sites when this is used in a GET request. To allow GET requests, set JsonRequestBehavior to AllowGet.");

            var response = context.HttpContext.Response;
            response.ContentType = !string.IsNullOrEmpty(ContentType) ? ContentType : "application/json";
            response.StatusCode = (int)StatusCode;
            // we need to set this so custom status codes (like 400) don't get overrideen by a default IIS response
            response.TrySkipIisCustomErrors = true;
            if (StatusDescription != null)
                response.StatusDescription = StatusDescription;
            if (ContentEncoding != null)
                response.ContentEncoding = ContentEncoding;

            if (Data == null) return;
            var writer = new JsonTextWriter(response.Output) { Formatting = Formatting, QuoteName = QuoteName };

            var serializer = JsonSerializer.CreateDefault();
            serializer.Serialize(writer, Data);
            writer.Flush();
        }
    }
}