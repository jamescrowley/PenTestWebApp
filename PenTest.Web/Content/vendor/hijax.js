/*! jQuery-hijax v1.0.0 License: https://github.com/smartystreets/jquery-hijax/ */
(function ($, window) {
    "use strict";

    var global = {};
    $.hijaxSetup = function (config) {
        global = $.extend({
            async: true,
            method: 'GET',
            cache: false,
            timeout: 12000,
            contentType: 'application/json',
            headers: {},

            attempts: 1, // 1-based value
            concurrent: false,

            before: noop,
            request: noop,
            progress: noop,

            success: noop,
            failure: noop,
            complete: noop,

            validation: noop,
            authentication: noop,
            authorization: noop,
            redirect: redirect,
            exception: noop
        }, config);

        return this;
    };
    $.hijax = function (config) {
        config = $.extend({ trigger: 'now', concurrent: true }, config);
        $(document).hijax(config);
    }
    $.fn.hijax = function (config) {
        $.hijaxSetup(global);
        config = $.extend({}, global, config);
        copyHeaders(global.headers, config.headers);

        if (this.selector)
            return attach.call(this, config) || this;

        return this.each(function () {
            var $elem = $(this);
            var trigger = config.trigger || ($elem.is('form') ? 'submit' : 'click');

            if (trigger.toString().toLowerCase() === 'now')
                return hijax.call($elem, config, {});

            $elem.on(trigger, function (event) { hijax.call($elem, config, event); });
        });
    };
    function attach(config) {
        $(document).on(config.trigger || 'click submit', this.selector, function (event) {
            var $elem = $(this);
            var allowed = {};
            var triggers = (config.trigger || ($elem.is('form') ? 'submit' : 'click')).split();
            for (var index in triggers)
                allowed[triggers[index]] = true;
            if (allowed[event.type])
                hijax.call($elem, config, event);
        });
    }
    function hijax(config, event) {
        event.preventDefault ? event.preventDefault() : event.returnValue = false;

        var state = config.before.call(this, event);
        if (state === false)
            return;

        state = state || {};
        var request = buildRequest.call(this, config, state);
        if (request && request.url && request.lock() && ajax(request, config, state) === false)
            request.unlock();
    }

    function noop() {
    }
    function buildRequest(config, state) {
        var url = this.attr(this.is('form') ? 'action' : 'href') || config.url;
        var _this = this;
        var elem = this[0];
        var request = $.extend({
            id: function (a, b) { for (b = a = ''; a++ < 36; b += a * 51 & 52 ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16) : '-'); return b }(), // GUID
            context: _this,
            url: url,
            data: '',
            method: this.attr('method') || config.method,
            headers: {},
            async: config.async,
            timeout: config.timeout,
            cache: config.cache,
            dataType: config.dataType,
            contentType: config.contentType,
            lock: function () {
                if (config.concurrent) return true;
                if (!elem.hijaxId || elem.hijaxId === this.id) return elem.hijaxId = this.id;
            },
            unlock: function () { if (this.id === elem.hijaxId) elem.hijaxId = undefined; } // delete unsupported on IE7.
        }, config.request.call(this, url, state, config) || {});

        if (typeof (request.data) === 'object')
            request.data = JSON.stringify(request.data);
        else if (!request.data && this.is('form')) {
            request.contentType = 'application/x-www-form-urlencoded';
            request.data = this.serialize();
        }
        copyHeaders(config.headers, request.headers);
        request.headers['x-hijax-id'] = request.id;
        return request;
    }
    function copyHeaders(source, target) {
        for (var header in source)
            if (target[header] === undefined)
                target[header] = source[header];
    }
    function ajax(request, config, state) {
        request.attempt = (request.attempt || 0) + 1;
        if (request.attempt > config.attempts)
            return false;

        if (config.progress.call(request.context, request.attempt, state) === false)
            return config.complete.call(request.context, undefined, state);

        return $.ajax({
            url: request.url,
            type: request.method,
            data: request.data,
            async: request.async,
            timeout: request.timeout,
            cache: request.cache,
            context: request.context,
            dataType: request.dataType,
            contentType: request.contentType,
            headers: request.headers,
            success: function (data) { request.result = data; },
            complete: function (xhr, status) {
                tryComplete.call({
                    request: request,
                    xhr: xhr,
                    timeout: status === 'timeout',
                    config: config,
                    state: state
                });
            }
        }) || true;
    }
    function tryComplete() {
        try {
            if (complete.call(this) === true)
                close.call(this);
        } catch (e) {
            close.call(this, e);
        }
    }
    function redirect(_, location) {
        window.location = location;
    }
    function complete() {
        var context = this.request.context;
        var xhr = this.xhr;
        var config = this.config;
        var state = this.state;

        var location = xhr.getResponseHeader("Location");
        if (location)
            config.redirect.call(context, xhr, location, state);
        else if (xhr.status >= 200 && xhr.status <= 206 || xhr.status == 304)
            config.success.call(context, xhr, this.request.result, state);
        else if (xhr.status === 400)
            config.validation.call(context, xhr, parseResponse(xhr.responseText), state);
        else if (xhr.status === 401)
            config.authentication.call(context, xhr, state);
        else if (xhr.status === 403)
            config.authorization.call(context, xhr, state);
        else if (xhr.status === 500 || this.timeout) {
            var retry = ajax(this.request, config, state);
            if (retry === false)
                config.failure.call(context, xhr, state);

            return !retry;
        }
        else if (xhr.status >= 400 || this.timeout)
            config.failure.call(context, xhr, state);

        return true;
    }
    function parseResponse(value) {
        try {
            return $.parseJSON(value);
        } catch (e) {
            return value;
        }
    }
    function close(exception) {
        this.request.unlock();

        if (exception)
            this.config.exception.call(this.request.context, this.xhr, exception, this.state);

        this.config.complete.call(this.request.context, this.xhr, this.state);
    }
})(jQuery, window);