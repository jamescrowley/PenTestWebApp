using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Helpers;
using System.Web.Mvc;
using System.Web.Security;

namespace PenTest.Web.Controllers
{
    public class SecureController : Controller
    {
        public ActionResult Index()
        {
            return View();
        }

    }
    
    public class AccountController : Controller
    {
        public ActionResult SignOut()
        {
            FormsAuthentication.SignOut();
            return RedirectToAction("Index", "Home");
        }

        // 1. With no XSRF
        // 2. With XSRF but XSS exploit elsewhere
        [HttpPost]
        [Authorize]
        public ActionResult ChangePassword(string newpassword)
        {
            return new ContentResult {Content = newpassword};
        }

        [Authorize]
        public ActionResult Index()
        {
            return View();
        }

        //AllowAnonymous
        public ActionResult Login(string returnUrl)
        {
            ViewBag.ReturnUrl = returnUrl;
            return View(new LogInModel());
        }

        [HttpPost]
        public ActionResult Login(LogInModel model, string returnUrl)
        {
            //ZAPFuzzer
            var user = MvcApplication.DataStore.Users.FirstOrDefault(t => t.UserName == model.UserName);
            
            if (user != null && Crypto.VerifyHashedPassword( user.HashedPassword, model.Password))
            {
                // using forms authentication,
                // simply because most people will be more familiar
                FormsAuthentication.SetAuthCookie(model.UserName, false);
                return Redirect(returnUrl ?? "/");
            }
            return View();
        }
	}
}